{"version":3,"sources":["components/ContactInfo.js","components/ContactDetails.js","components/Contact.js","components/App.js","serviceWorker.js","index.js"],"names":["ContactInfo","react_default","a","createElement","onClick","this","props","contact","name","Component","ContactDetails","details","phone","blank","isSelected","React","defaultProps","Contact","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selectedKey","keyword","contactData","handleChange","bind","assertThisInitialized","handleClick","e","setState","target","value","key","console","log","data","_this2","placeholder","onChange","sort","filter","toLowerCase","indexOf","map","i","ContactInfo_ContactInfo","ContactDetails_ContactDetails","App","Contact_Contact","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,QAASC,KAAKC,MAAMF,SAAUC,KAAKC,MAAMC,QAAQC,aAHzBC,aCApBC,mLAGb,IAAMC,EACFV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,QAAQC,MACvBP,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,QAAQK,QAGzBC,EACFZ,EAAAC,EAAAC,cAAA,2BAGJ,OACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,qBACCE,KAAKC,MAAMQ,WAAaH,EAAUE,UAhBPE,IAAMN,WAsBlDC,EAAeM,aAAe,CAC1BT,QAAS,CACLC,KAAM,GACNI,MAAO,SCvBMK,cAEjB,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KACDkB,MAAQ,CACTC,aAAc,EACdC,QAAS,GACTC,YAAa,CAAC,CACVnB,KAAK,OACLI,MAAM,iBACR,CACEJ,KAAK,QACLI,MAAM,iBACR,CACEJ,KAAK,UACLI,MAAM,iBACR,CACEJ,KAAK,QACLI,MAAM,mBAIdM,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,YAAcb,EAAKa,YAAYF,KAAjBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KArBJA,4EAwBNc,GACT3B,KAAK4B,SAAS,CACVP,QAASM,EAAEE,OAAOC,4CAIdC,GACR/B,KAAK4B,SAAS,CACVR,YAAaW,IAGjBC,QAAQC,IAAIF,EAAK,gDAGZ,IACoBG,EADpBC,EAAAnC,KAiBL,OACIJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACIK,KAAK,UACLiC,YAAY,SACZN,MAAO9B,KAAKmB,MAAME,QAClBgB,SAAUrC,KAAKuB,eAEnB3B,EAAAC,EAAAC,cAAA,aAzBiBoC,EAyBKlC,KAAKmB,MAAMG,aAxBhCgB,QACLJ,EAAOA,EAAKK,OACR,SAACrC,GACG,OAAOA,EAAQC,KAAKqC,cACfC,QAAQN,EAAKhB,MAAME,QAAQmB,gBAAkB,KAG9CE,IAAI,SAACxC,EAASyC,GACtB,OAAQ/C,EAAAC,EAAAC,cAAC8C,EAAD,CACI1C,QAASA,EACT6B,IAAKY,EACL5C,QAAS,kBAAMoC,EAAKT,YAAYiB,UAc5C/C,EAAAC,EAAAC,cAAC+C,EAAD,CACIpC,YAAwC,IAA5BT,KAAKmB,MAAMC,YACvBlB,QAASF,KAAKmB,MAAMG,YAAYtB,KAAKmB,MAAMC,uBArE1BhB,aCMtB0C,mLANX,OACElD,EAAAC,EAAAC,cAACiD,EAAD,aAHY3C,aCUE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.177be039.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ContactInfo extends Component {\n    render() {\n        return (\n            <div onClick={this.props.onClick}>{this.props.contact.name}</div>\n        );\n    }\n}","import React from 'react';\n\nexport default class ContactDetails extends React.Component {\n    render() {\n\n        const details = (\n            <div>\n                <p>{this.props.contact.name}</p>\n                <p>{this.props.contact.phone}</p>\n            </div>\n        );\n        const blank = (\n            <div>Not Selected</div>\n        );\n\n        return (\n            <div>\n                <h2>Details</h2>\n                {this.props.isSelected ? details : blank}\n            </div>\n        )\n    }\n}\n\nContactDetails.defaultProps = {\n    contact: {\n        name: '',\n        phone: ''\n    }\n}","import React, { Component } from 'react';\nimport ContactInfo from './ContactInfo';\nimport ContactDetails from './ContactDetails';\n\nexport default class Contact extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedKey: -1,\n            keyword: '',\n            contactData: [{\n                name:'Abet',\n                phone:'010-0000-0001'\n            },{\n                name:'Betty',\n                phone:'010-0000-0002'\n            },{\n                name:'Charlie',\n                phone:'010-0000-0003'\n            },{\n                name:'David',\n                phone:'010-0000-0004'\n            }]\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({\n            keyword: e.target.value\n        })\n    }\n\n    handleClick(key) {\n        this.setState({\n            selectedKey: key\n        });\n\n        console.log(key, 'is selected');\n    }\n\n    render() {\n        const mapToComponents = (data) => {\n            data.sort();\n            data = data.filter(\n                (contact) => {\n                    return contact.name.toLowerCase()\n                        .indexOf(this.state.keyword.toLowerCase()) > -1;\n                }\n            )\n            return data.map((contact, i) => {\n                return (<ContactInfo \n                            contact={contact} \n                            key={i}\n                            onClick={() => this.handleClick(i)}\n                        />);\n            });\n        };\n        return (\n            <div>\n                <h1>Contacts</h1>\n                <input \n                    name=\"keyword\"\n                    placeholder=\"Search\"\n                    value={this.state.keyword}\n                    onChange={this.handleChange}\n                />\n                <div>{mapToComponents(this.state.contactData)}</div>\n                <ContactDetails \n                    isSelected={this.state.selectedKey !== -1}\n                    contact={this.state.contactData[this.state.selectedKey]}\n                />\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Contact from './Contact';\nclass App extends Component {\n  render() {\n    return (\n      <Contact/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}